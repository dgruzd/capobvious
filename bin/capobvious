#!/usr/bin/env ruby


require 'optparse'
require 'fileutils'

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [path]"

  opts.on("-h", "--help", "Displays this help info") do
    puts opts
    exit 0
  end

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

if ARGV.empty?
  abort "Please specify the directory to capify, e.g. `#{File.basename($0)} .'"
elsif !File.exists?(ARGV.first)
  abort "`#{ARGV.first}' does not exist."
elsif !File.directory?(ARGV.first)
  abort "`#{ARGV.first}' is not a directory."
elsif ARGV.length > 1
  abort "Too many arguments; please specify only the directory to capify."
end

def unindent(string)
  indentation = string[/\A\s*/]
  string.strip.gsub(/^#{indentation}/, "")
end

repository=`git remote -v`.split("\n").first.split("\t").last.split(/\s+/).first rescue nil

files = {
  "Capfile" => <<FILE,
load 'deploy'
Dir['vendor/gems/*/recipes/*.rb','vendor/plugins/*/recipes/*.rb'].each { |plugin| load(plugin) }
load 'config/deploy' # remove this line to skip loading any of the default tasks
require 'capistrano/ext/capobvious'
FILE

  "config/deploy.rb" => <<FILE,
# -*- encoding : utf-8 -*-
set :ruby_version, '1.9.3'
set :application, "appname"
set :user, "USER_NAME_HERE"
set :serv, "IP_ADDRESS_HERE"

set :repository,  "#{repository||'REPOSITORY_HERE'}"
set :branch, "master"
set :server_name, "example.com"
set :server_redirect, "www.example.com"

set :assets, true
set :backup_db, false
set :backup_sys, false
set :auto_migrate, true

#set :deploy_folder, "/home/user/www/application"
set :deploy_via, :remote_cache

set :keep_releases, 5
set :use_sudo, false

set :scm, :git

role :app, serv
role :web, serv
role :db, serv, :primary => true
FILE
"config/unicorn.rb" => <<FILE
# -*- encoding : utf-8 -*-
APP_PATH = File.expand_path(File.dirname(File.dirname(__FILE__)))
SHARED_PATH = File.expand_path(APP_PATH+"/../shared")

  working_directory APP_PATH
  
  pid_file   = SHARED_PATH + "/pids/unicorn.pid"
  socket_file= SHARED_PATH + "/pids/unicorn.sock"
  log_file   = APP_PATH + "/log/unicorn.log"
  err_log    = APP_PATH + "/log/unicorn.stderr.log"
  old_pid    = pid_file + '.oldbin'


  timeout 30
  worker_processes 2
  preload_app true
  listen socket_file, :backlog => 1024
  pid pid_file
  stderr_path err_log
  stdout_path log_file

  GC.copy_on_write_friendly = true if GC.respond_to?(:copy_on_write_friendly=)


before_exec do |server|
  ENV["BUNDLE_GEMFILE"] = APP_PATH+"/Gemfile"
end

before_fork do |server, worker|
  defined?(ActiveRecord::Base) && ActiveRecord::Base.connection.disconnect!

  if File.exists?(old_pid) && server.pid != old_pid
    begin
      #sig = (worker.nr + 1) >= server.worker_processes ? :QUIT : :TTOU
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
    end
  end
end

after_fork do |server, worker|
  defined?(ActiveRecord::Base) && ActiveRecord::Base.establish_connection
end
FILE
}

base = ARGV.shift
files.each do |file, content|
  file = File.join(base, file)
  if File.exists?(file)
    warn "[skip] '#{file}' already exists"
  elsif File.exists?(file.downcase)
    warn "[skip] '#{file.downcase}' exists, which could conflict with `#{file}'"
  else
    unless File.exists?(File.dirname(file))
      puts "[add] making directory '#{File.dirname(file)}'"
      FileUtils.mkdir(File.dirname(file))
    end
    puts "[add] writing '#{file}'"
    File.open(file, "w") { |f| f.write(content) }
  end
end

puts "[done] capified!"
